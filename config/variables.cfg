#!/bin/bash
set -e

#Color definitions
RED='\x1B[0;31m'
CYAN='\x1B[0;36m'
GREEN='\x1B[0;32m'
NC='\x1B[0m'

#Make sure curl and jq commands exist & if not install them
if ! [ -x "$(command -v curl)" ]; then sudo apt update; sudo apt install curl -qq -y; fi
if ! [ -x "$(command -v jq)" ]; then sudo apt update; sudo apt install jq -qq -y; fi

#-------------------------------#### ! CUSTOMIZE THESE ! ####-------------------------------#

# ENVIRONMENT lets the script know where it will be run. Possible options are:
#        - mainnet --> will use configs for the main MultiversX Network                           
#        - testnet --> uses configs for the MultiversX Testnet
#        - devnet --> allows access to the long-lived MultiversX Devnet
#
# CUSTOM_HOME refers to the home folder of the remote machines on which you will install nodes
# CUSTOM_USER is the user on the remote machines under which you will run the install, upgrade and other processes
#
# GITHUBTOKEN stores your github OAUTH token (allows API calls at a greater rate)
#
# VERRIDE_PROXYVER allows the user to override the current proxy config version
# OVERRIDE_CONFIGVER Allows overwriting the current config version for the chosen network

ENVIRONMENT=""

CUSTOM_HOME="/home/ubuntu"
CUSTOM_USER="ubuntu"
NODE_KEYS_LOCATION="$CUSTOM_HOME/VALIDATOR_KEYS"
GITHUBTOKEN=""
NODE_EXTRA_FLAGS=""

OVERRIDE_PROXYVER=""
OVERRIDE_CONFIGVER=""

#-------------------------------#### DON'T CHANGE THESE ####-------------------------------#

#Make script aware of its location
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

#Use the latest MultiversX tested GO Lang version
#This will be overwritten with the config value if a goVersion file is provided.
#It will be deprecated once all public chains switch to goVersion file config.
GO_LATEST_TESTED="1.20.7"

#Obtain the tag for the latest version node & configs
TMPVAR="tags/"

# Define the authorization header if GITHUBTOKEN is available
AUTH_HEADER=""
[ -n "$GITHUBTOKEN" ] && AUTH_HEADER="-H \"Authorization: $GITHUBTOKEN\""

# Fetch latest config version and release notes
CONFIGVER="tags/$(eval curl --silent $AUTH_HEADER \"https://api.github.com/repos/multiversx/mx-chain-$ENVIRONMENT-config/releases/latest\" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')"
RELEASENOTES=$(eval curl --silent $AUTH_HEADER \"https://api.github.com/repos/multiversx/mx-chain-$ENVIRONMENT-config/releases/latest\" | grep '"body": '| cut -f2- -d:)

# Get the latest scripts commit and rate limit response
LATEST_SCRIPTS_COMMIT=$(eval curl --silent $AUTH_HEADER \"https://api.github.com/repos/multiversx/mx-chain-scripts/commits/master\" | jq -r .sha)
GITHUB_RATE_LIMIT_RESPONSE=$(eval curl --silent $AUTH_HEADER \"https://api.github.com/rate_limit\")

# Determine the goVersion to fetch
API_CALL_CONFIGVER=${OVERRIDE_CONFIGVER:-$CONFIGVER}
TEMP_ENCODED_GO_VERSION=$(eval curl --silent $AUTH_HEADER \"https://api.github.com/repos/multiversx/mx-chain-$ENVIRONMENT-config/contents/goVersion?ref=$API_CALL_CONFIGVER\" | jq -r '.content')

# TODO: remove this if once all chain configs have goVersion file and update TEMP_ENCODED_GO_VERSION
if [ "$TEMP_ENCODED_GO_VERSION" == null ]; then
	echo -e "${RED}Could not fetch goVersion from config, will use the default one ${GO_LATEST_TESTED}!${NC}"
else
	GO_VERSION_FROM_LATEST_CONFIG=$(echo $TEMP_ENCODED_GO_VERSION | base64 --decode)
fi

#Check to see if autocomplete has been added
[ ! -f "/etc/bash_completion.d/script.sh" ] && sudo cp $SCRIPTPATH/config/script-completion.bash /etc/bash_completion.d/script.sh && echo -e && echo -e "${GREEN}Script commands autocomplete not present. Added and reloaded bash shell. Plese re-run your command.${NC}" && echo -e && exec bash

SHOWVER=$(echo ${CONFIGVER#${TMPVAR}})

SCRIPTS_LOCATION=$(pwd)
DIRECTORY_NAME=${PWD##*/}
ATTENTION=$(echo $ENVIRONMENT | tr [a-z] [A-Z])

#GitHub API related variables
GITHUB_API_LIMIT=$(echo $GITHUB_RATE_LIMIT_RESPONSE | jq -r .resources.core.limit)
GITHUB_API_USED=$(echo $GITHUB_RATE_LIMIT_RESPONSE | jq -r .resources.core.used)
GITHUB_API_RESET=$(echo $GITHUB_RATE_LIMIT_RESPONSE | jq -r .resources.core.reset)
HUMAN_TIME=$(date -d @"$GITHUB_API_RESET")

#------------------------------------------------------------------------------------------#
